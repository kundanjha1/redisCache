package org.kundansonuj.datacache;


import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.kundansonuj.datacache.redis.RedisClient;


public class StatementCache implements Statement {
    private Connection parentConnection;
    private Statement wrappedStatement;
    private RedisClient redisClient;
    private String database;

    public StatementCache(Connection parentConnection, Statement wrappedStatement, RedisClient redisClient,String database) {
        this.parentConnection = parentConnection;
        this.wrappedStatement = wrappedStatement;
        this.redisClient = redisClient;
        this.database=database;
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        try {
            if (    "java.sql.Statement".equals(iface.getName())
                    || "java.sql.Wrapper.class".equals(iface.getName())) {
                return iface.cast(this);
            }

            return wrappedStatement.unwrap(iface);
        } catch (ClassCastException cce) {
            throw new SQLException("Unable to unwrap to " + iface.toString(), cce);
        }
    }

    public boolean isWrapperFor(Class iface) throws SQLException {
        if (    "java.sql.Statement".equals(iface.getName())
                || "java.sql.Wrapper.class".equals(iface.getName())) {
            return true;
        }
        return wrappedStatement.isWrapperFor(iface);
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        // Use the Redis client class to execute the query in order to retrieve the
        // result set from cache if already present
        return redisClient.executeQuery(this.wrappedStatement, sql,database);
    }

    public boolean execute(String sql) throws SQLException {
        return wrappedStatement.execute(sql);
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return wrappedStatement.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return wrappedStatement.execute(sql, columnIndexes);
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return wrappedStatement.execute(sql, columnNames);
    }

    public ResultSet getResultSet() throws SQLException {
        return wrappedStatement.getResultSet();
    }

    public int executeUpdate(String sql) throws SQLException {
        return wrappedStatement.executeUpdate(sql);
    }

    public void close() throws SQLException {
        wrappedStatement.close();
    }

    public void closeOnCompletion() throws SQLException {
        wrappedStatement.closeOnCompletion();
    }

    public boolean isCloseOnCompletion() throws SQLException {
        return wrappedStatement.isCloseOnCompletion();
    }

    public int getMaxFieldSize() throws SQLException {
        return wrappedStatement.getMaxFieldSize();
    }

    public void setMaxFieldSize(int max) throws SQLException {
        wrappedStatement.setMaxFieldSize(max);
    }

    public int getMaxRows() throws SQLException {
        return wrappedStatement.getMaxRows();
    }

    public void setMaxRows(int max) throws SQLException {
        wrappedStatement.setMaxRows(max);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        wrappedStatement.setEscapeProcessing(enable);
    }

    public int getQueryTimeout() throws SQLException {
        return wrappedStatement.getQueryTimeout();
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        wrappedStatement.setQueryTimeout(seconds);
    }

    public void cancel() throws SQLException {
        wrappedStatement.cancel();
    }

    public SQLWarning getWarnings() throws SQLException {
        return wrappedStatement.getWarnings();
    }

    public void clearWarnings() throws SQLException {
        wrappedStatement.clearWarnings();
    }

    public void setCursorName(String name) throws SQLException {
        wrappedStatement.setCursorName(name);
    }

    public int getUpdateCount() throws SQLException {
        return wrappedStatement.getUpdateCount();
    }

    public boolean getMoreResults() throws SQLException {
        return wrappedStatement.getMoreResults();
    }

    public void setFetchDirection(int direction) throws SQLException {
        wrappedStatement.setFetchDirection(direction);
    }

    public int getFetchDirection() throws SQLException {
        return wrappedStatement.getFetchDirection();
    }

    public void setFetchSize(int rows) throws SQLException {
        wrappedStatement.setFetchSize(rows);
    }

    public int getFetchSize() throws SQLException {
        return wrappedStatement.getFetchSize();
    }

    public int getResultSetConcurrency() throws SQLException {
        return wrappedStatement.getResultSetConcurrency();
    }

    public int getResultSetType() throws SQLException {
        return wrappedStatement.getResultSetType();
    }

    public void addBatch(String sql) throws SQLException {
        wrappedStatement.addBatch(sql);
    }

    public void clearBatch() throws SQLException {
        wrappedStatement.clearBatch();
    }

    public int[] executeBatch() throws SQLException {
        return wrappedStatement.executeBatch();
    }

    public Connection getConnection() throws SQLException {
        return parentConnection;
    }

    public boolean getMoreResults(int current) throws SQLException {
        return wrappedStatement.getMoreResults(current);
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return wrappedStatement.getGeneratedKeys();
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return wrappedStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return wrappedStatement.executeUpdate(sql, columnIndexes);
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return wrappedStatement.executeUpdate(sql, columnNames);
    }

    public int getResultSetHoldability() throws SQLException {
        return wrappedStatement.getResultSetHoldability();
    }

    public boolean isClosed() throws SQLException {
        return wrappedStatement.isClosed();
    }

    public void setPoolable(boolean poolable) throws SQLException {
        wrappedStatement.setPoolable(poolable);
    }

    public boolean isPoolable() throws SQLException {
        return wrappedStatement.isPoolable();
    }
}
